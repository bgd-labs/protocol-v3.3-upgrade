diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/DataTypes.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/DataTypes.sol
index 45b226c..8e5b1a9 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/DataTypes.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/DataTypes.sol
@@ -50,8 +50,9 @@ library DataTypes {
         uint128 variableBorrowIndex;
         //the current variable borrow rate. Expressed in ray
         uint128 currentVariableBorrowRate;
-        // DEPRECATED on v3.2.0
-        uint128 __deprecatedStableBorrowRate;
+        /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+        // the current accumulate deficit in underlying tokens
+        uint128 deficit;
         //timestamp of last update
         uint40 lastUpdateTimestamp;
         //the id of the reserve. Represents the position in the list of the active reserves
@@ -216,6 +217,11 @@ library DataTypes {
         uint8 userEModeCategory;
     }
 
+    struct ExecuteEliminateDeficitParams {
+        address asset;
+        uint256 amount;
+    }
+
     struct ExecuteSetUserEModeParams {
         uint256 reservesCount;
         address oracle;
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/EModeConfiguration.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/EModeConfiguration.sol
index 2b0489a..5f687dc 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/EModeConfiguration.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/EModeConfiguration.sol
@@ -2,7 +2,6 @@
 pragma solidity ^0.8.0;
 
 import {Errors} from "../helpers/Errors.sol";
-import {DataTypes} from "../types/DataTypes.sol";
 import {ReserveConfiguration} from "./ReserveConfiguration.sol";
 
 /**
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/EModeLogic.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/EModeLogic.sol
index 4458909..fd2e7ea 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/EModeLogic.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/EModeLogic.sol
@@ -3,7 +3,6 @@ pragma solidity ^0.8.10;
 
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {IPriceOracleGetter} from "../../../interfaces/IPriceOracleGetter.sol";
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/Errors.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/Errors.sol
index d2a0c13..eb8c305 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/Errors.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/Errors.sol
@@ -101,4 +101,8 @@ library Errors {
     string public constant INVALID_GRACE_PERIOD = "98"; // Grace period above a valid range
     string public constant INVALID_FREEZE_STATE = "99"; // Reserve is already in the passed freeze state
     string public constant NOT_BORROWABLE_IN_EMODE = "100"; // Asset not borrowable in eMode
+    string public constant CALLER_NOT_UMBRELLA = "101"; // The caller of the function is not the umbrella contract
+    string public constant RESERVE_NOT_IN_DEFICIT = "102"; // The reserve is not in deficit
+    string public constant MUST_NOT_LEAVE_DUST = "103"; // Below a certain threshold liquidators need to take the full position
+    string public constant USER_CANNOT_HAVE_DEBT = "104"; // Thrown when a user tries to interact with a method that requires a position without debt
 }
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/GenericLogic.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/GenericLogic.sol
index a3efd9a..16d348e 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/GenericLogic.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/GenericLogic.sol
@@ -159,12 +159,20 @@ library GenericLogic {
             }
 
             if (params.userConfig.isBorrowing(vars.i)) {
-                vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(
-                    params.user,
-                    currentReserve,
-                    vars.assetPrice,
-                    vars.assetUnit
-                );
+                if (currentReserve.configuration.getIsVirtualAccActive()) {
+                    vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(
+                        params.user,
+                        currentReserve,
+                        vars.assetPrice,
+                        vars.assetUnit
+                    );
+                } else {
+                    // custom case for GHO, which applies the GHO discount on balanceOf
+                    vars.totalDebtInBaseCurrency +=
+                        (IERC20(currentReserve.variableDebtTokenAddress)
+                            .balanceOf(params.user) * vars.assetPrice) /
+                        vars.assetUnit;
+                }
             }
 
             unchecked {
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/IPool.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/IPool.sol
index c65cf8e..f0ed8d2 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/IPool.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/IPool.sol
@@ -204,6 +204,18 @@ interface IPool {
         uint256 variableBorrowIndex
     );
 
+    /**
+     * @dev Emitted when the deficit of a reserve is covered.
+     * @param reserve The address of the underlying asset of the reserve
+     * @param caller The caller that triggered the DeficitCovered event
+     * @param amountCovered The amount of deficit covered
+     */
+    event DeficitCovered(
+        address indexed reserve,
+        address caller,
+        uint256 amountCovered
+    );
+
     /**
      * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
      * @param reserve The address of the reserve
@@ -211,6 +223,18 @@ interface IPool {
      */
     event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
+    /**
+     * @dev Emitted when deficit is realized on a liquidation.
+     * @param user The user address where the bad debt will be burned
+     * @param debtAsset The address of the underlying borrowed asset to be burned
+     * @param amountCreated The amount of deficit created
+     */
+    event DeficitCreated(
+        address indexed user,
+        address indexed debtAsset,
+        uint256 amountCreated
+    );
+
     /**
      * @notice Mints an `amount` of aTokens to the `onBehalfOf`
      * @param asset The address of the underlying asset to mint
@@ -600,15 +624,6 @@ interface IPool {
         address asset
     ) external view returns (DataTypes.ReserveDataLegacy memory);
 
-    /**
-     * @notice Returns the state and configuration of the reserve, including extra data included with Aave v3.1
-     * @param asset The address of the underlying asset of the reserve
-     * @return The state and configuration data of the reserve with virtual accounting
-     */
-    function getReserveDataExtended(
-        address asset
-    ) external view returns (DataTypes.ReserveData memory);
-
     /**
      * @notice Returns the virtual underlying balance of the reserve
      * @param asset The address of the underlying asset of the reserve
@@ -802,7 +817,9 @@ interface IPool {
      * @return Timestamp when the liquidation grace period will end
      *
      */
-    function getLiquidationGracePeriod(address asset) external returns (uint40);
+    function getLiquidationGracePeriod(
+        address asset
+    ) external view returns (uint40);
 
     /**
      * @notice Returns the total fee on flash loans
@@ -861,6 +878,39 @@ interface IPool {
         uint16 referralCode
     ) external;
 
+    /**
+     * @notice It covers the deficit of a specified reserve by burning:
+     * - the equivalent aToken `amount` for assets with virtual accounting enabled
+     * - the equivalent `amount` of underlying for assets with virtual accounting disabled (e.g. GHO)
+     * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+     * @param asset The address of the underlying asset to cover the deficit.
+     * @param amount The amount to be covered, in aToken or underlying on non-virtual accounted assets
+     */
+    function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+    /**
+     * @notice Returns the current deficit of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The current deficit of the reserve
+     */
+    function getReserveDeficit(address asset) external view returns (uint256);
+
+    /**
+     * @notice Returns the aToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the aToken
+     */
+    function getReserveAToken(address asset) external view returns (address);
+
+    /**
+     * @notice Returns the variableDebtToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the variableDebtToken
+     */
+    function getReserveVariableDebtToken(
+        address asset
+    ) external view returns (address);
+
     /**
      * @notice Gets the address of the external FlashLoanLogic
      */
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ReserveConfiguration.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ReserveConfiguration.sol
index e0713b0..a829da8 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ReserveConfiguration.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ReserveConfiguration.sol
@@ -10,32 +10,33 @@ import {DataTypes} from "../types/DataTypes.sol";
  * @notice Implements the bitmap logic to handle the reserve configuration
  */
 library ReserveConfiguration {
-    uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore
+    uint256 internal constant LTV_MASK = 0x000000000000000000000000000000000000000000000000000000000000FFFF; // prettier-ignore
     uint256 internal constant LIQUIDATION_THRESHOLD_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore
+        0x00000000000000000000000000000000000000000000000000000000FFFF0000; // prettier-ignore
     uint256 internal constant LIQUIDATION_BONUS_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore
-    uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant PAUSED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000000000FFFF00000000; // prettier-ignore
+    uint256 internal constant DECIMALS_MASK = 0x00000000000000000000000000000000000000000000000000FF000000000000; // prettier-ignore
+    uint256 internal constant ACTIVE_MASK = 0x0000000000000000000000000000000000000000000000000100000000000000; // prettier-ignore
+    uint256 internal constant FROZEN_MASK = 0x0000000000000000000000000000000000000000000000000200000000000000; // prettier-ignore
+    uint256 internal constant BORROWING_MASK = 0x0000000000000000000000000000000000000000000000000400000000000000; // prettier-ignore
+    // @notice there is an unoccupied hole of 1 bit at position 59 from pre 3.2 stableBorrowRateEnabled
+    uint256 internal constant PAUSED_MASK = 0x0000000000000000000000000000000000000000000000001000000000000000; // prettier-ignore
     uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SILOED_BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000002000000000000000; // prettier-ignore
+    uint256 internal constant SILOED_BORROWING_MASK = 0x0000000000000000000000000000000000000000000000004000000000000000; // prettier-ignore
     uint256 internal constant FLASHLOAN_ENABLED_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000008000000000000000; // prettier-ignore
+    uint256 internal constant RESERVE_FACTOR_MASK = 0x00000000000000000000000000000000000000000000FFFF0000000000000000; // prettier-ignore
+    uint256 internal constant BORROW_CAP_MASK = 0x00000000000000000000000000000000000FFFFFFFFF00000000000000000000; // prettier-ignore
+    uint256 internal constant SUPPLY_CAP_MASK = 0x00000000000000000000000000FFFFFFFFF00000000000000000000000000000; // prettier-ignore
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000FFFF00000000000000000000000000000000000000; // prettier-ignore
     //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
     uint256 internal constant UNBACKED_MINT_CAP_MASK =
-        0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant DEBT_CEILING_MASK = 0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x00000000000FFFFFFFFF00000000000000000000000000000000000000000000; // prettier-ignore
+    uint256 internal constant DEBT_CEILING_MASK = 0x0FFFFFFFFFF00000000000000000000000000000000000000000000000000000; // prettier-ignore
     uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =
-        0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x1000000000000000000000000000000000000000000000000000000000000000; // prettier-ignore
 
     /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
     uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;
@@ -82,7 +83,7 @@ library ReserveConfiguration {
     ) internal pure {
         require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);
 
-        self.data = (self.data & LTV_MASK) | ltv;
+        self.data = (self.data & ~LTV_MASK) | ltv;
     }
 
     /**
@@ -93,7 +94,7 @@ library ReserveConfiguration {
     function getLtv(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return self.data & ~LTV_MASK;
+        return self.data & LTV_MASK;
     }
 
     /**
@@ -111,7 +112,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_THRESHOLD_MASK) |
+            (self.data & ~LIQUIDATION_THRESHOLD_MASK) |
             (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);
     }
 
@@ -124,7 +125,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>
+            (self.data & LIQUIDATION_THRESHOLD_MASK) >>
             LIQUIDATION_THRESHOLD_START_BIT_POSITION;
     }
 
@@ -140,7 +141,7 @@ library ReserveConfiguration {
         require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);
 
         self.data =
-            (self.data & LIQUIDATION_BONUS_MASK) |
+            (self.data & ~LIQUIDATION_BONUS_MASK) |
             (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
     }
 
@@ -153,7 +154,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_BONUS_MASK) >>
+            (self.data & LIQUIDATION_BONUS_MASK) >>
             LIQUIDATION_BONUS_START_BIT_POSITION;
     }
 
@@ -169,7 +170,7 @@ library ReserveConfiguration {
         require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);
 
         self.data =
-            (self.data & DECIMALS_MASK) |
+            (self.data & ~DECIMALS_MASK) |
             (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
     }
 
@@ -182,7 +183,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
+            (self.data & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
     }
 
     /**
@@ -195,7 +196,7 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & ACTIVE_MASK) |
+            (self.data & ~ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);
     }
 
@@ -207,7 +208,7 @@ library ReserveConfiguration {
     function getActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~ACTIVE_MASK) != 0;
+        return (self.data & ACTIVE_MASK) != 0;
     }
 
     /**
@@ -220,7 +221,7 @@ library ReserveConfiguration {
         bool frozen
     ) internal pure {
         self.data =
-            (self.data & FROZEN_MASK) |
+            (self.data & ~FROZEN_MASK) |
             (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);
     }
 
@@ -232,7 +233,7 @@ library ReserveConfiguration {
     function getFrozen(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FROZEN_MASK) != 0;
+        return (self.data & FROZEN_MASK) != 0;
     }
 
     /**
@@ -245,7 +246,7 @@ library ReserveConfiguration {
         bool paused
     ) internal pure {
         self.data =
-            (self.data & PAUSED_MASK) |
+            (self.data & ~PAUSED_MASK) |
             (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);
     }
 
@@ -257,7 +258,7 @@ library ReserveConfiguration {
     function getPaused(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~PAUSED_MASK) != 0;
+        return (self.data & PAUSED_MASK) != 0;
     }
 
     /**
@@ -274,7 +275,7 @@ library ReserveConfiguration {
         bool borrowable
     ) internal pure {
         self.data =
-            (self.data & BORROWABLE_IN_ISOLATION_MASK) |
+            (self.data & ~BORROWABLE_IN_ISOLATION_MASK) |
             (uint256(borrowable ? 1 : 0) <<
                 BORROWABLE_IN_ISOLATION_START_BIT_POSITION);
     }
@@ -291,7 +292,7 @@ library ReserveConfiguration {
     function getBorrowableInIsolation(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;
+        return (self.data & BORROWABLE_IN_ISOLATION_MASK) != 0;
     }
 
     /**
@@ -305,7 +306,7 @@ library ReserveConfiguration {
         bool siloed
     ) internal pure {
         self.data =
-            (self.data & SILOED_BORROWING_MASK) |
+            (self.data & ~SILOED_BORROWING_MASK) |
             (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);
     }
 
@@ -318,7 +319,7 @@ library ReserveConfiguration {
     function getSiloedBorrowing(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~SILOED_BORROWING_MASK) != 0;
+        return (self.data & SILOED_BORROWING_MASK) != 0;
     }
 
     /**
@@ -331,7 +332,7 @@ library ReserveConfiguration {
         bool enabled
     ) internal pure {
         self.data =
-            (self.data & BORROWING_MASK) |
+            (self.data & ~BORROWING_MASK) |
             (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);
     }
 
@@ -343,7 +344,7 @@ library ReserveConfiguration {
     function getBorrowingEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWING_MASK) != 0;
+        return (self.data & BORROWING_MASK) != 0;
     }
 
     /**
@@ -361,7 +362,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & RESERVE_FACTOR_MASK) |
+            (self.data & ~RESERVE_FACTOR_MASK) |
             (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);
     }
 
@@ -374,7 +375,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~RESERVE_FACTOR_MASK) >>
+            (self.data & RESERVE_FACTOR_MASK) >>
             RESERVE_FACTOR_START_BIT_POSITION;
     }
 
@@ -390,7 +391,7 @@ library ReserveConfiguration {
         require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);
 
         self.data =
-            (self.data & BORROW_CAP_MASK) |
+            (self.data & ~BORROW_CAP_MASK) |
             (borrowCap << BORROW_CAP_START_BIT_POSITION);
     }
 
@@ -402,7 +403,7 @@ library ReserveConfiguration {
     function getBorrowCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
+        return (self.data & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -417,7 +418,7 @@ library ReserveConfiguration {
         require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);
 
         self.data =
-            (self.data & SUPPLY_CAP_MASK) |
+            (self.data & ~SUPPLY_CAP_MASK) |
             (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
     }
 
@@ -429,7 +430,7 @@ library ReserveConfiguration {
     function getSupplyCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
+        return (self.data & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -444,7 +445,7 @@ library ReserveConfiguration {
         require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);
 
         self.data =
-            (self.data & DEBT_CEILING_MASK) |
+            (self.data & ~DEBT_CEILING_MASK) |
             (ceiling << DEBT_CEILING_START_BIT_POSITION);
     }
 
@@ -457,7 +458,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
+            (self.data & DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
     }
 
     /**
@@ -475,7 +476,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |
+            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) |
             (liquidationProtocolFee <<
                 LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);
     }
@@ -489,7 +490,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>
+            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) >>
             LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
     }
 
@@ -508,7 +509,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & UNBACKED_MINT_CAP_MASK) |
+            (self.data & ~UNBACKED_MINT_CAP_MASK) |
             (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
     }
 
@@ -521,7 +522,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~UNBACKED_MINT_CAP_MASK) >>
+            (self.data & UNBACKED_MINT_CAP_MASK) >>
             UNBACKED_MINT_CAP_START_BIT_POSITION;
     }
 
@@ -535,7 +536,7 @@ library ReserveConfiguration {
         bool flashLoanEnabled
     ) internal pure {
         self.data =
-            (self.data & FLASHLOAN_ENABLED_MASK) |
+            (self.data & ~FLASHLOAN_ENABLED_MASK) |
             (uint256(flashLoanEnabled ? 1 : 0) <<
                 FLASHLOAN_ENABLED_START_BIT_POSITION);
     }
@@ -548,7 +549,7 @@ library ReserveConfiguration {
     function getFlashLoanEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;
+        return (self.data & FLASHLOAN_ENABLED_MASK) != 0;
     }
 
     /**
@@ -561,21 +562,24 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & VIRTUAL_ACC_ACTIVE_MASK) |
+            (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << VIRTUAL_ACC_START_BIT_POSITION);
     }
 
     /**
      * @notice Gets the virtual account active/not state of the reserve
      * @dev The state should be true for all normal assets and should be false
-     *  only in special cases (ex. GHO) where an asset is minted instead of supplied.
+     * Virtual accounting being disabled means that the asset:
+     * - is GHO
+     * - can never be supplied
+     * - the interest rate strategy is not influenced by the virtual balance
      * @param self The reserve configuration
      * @return The active state
      */
     function getIsVirtualAccActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) != 0;
+        return (self.data & VIRTUAL_ACC_ACTIVE_MASK) != 0;
     }
 
     /**
@@ -592,10 +596,10 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~ACTIVE_MASK) != 0,
-            (dataLocal & ~FROZEN_MASK) != 0,
-            (dataLocal & ~BORROWING_MASK) != 0,
-            (dataLocal & ~PAUSED_MASK) != 0
+            (dataLocal & ACTIVE_MASK) != 0,
+            (dataLocal & FROZEN_MASK) != 0,
+            (dataLocal & BORROWING_MASK) != 0,
+            (dataLocal & PAUSED_MASK) != 0
         );
     }
 
@@ -614,13 +618,13 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            dataLocal & ~LTV_MASK,
-            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>
+            dataLocal & LTV_MASK,
+            (dataLocal & LIQUIDATION_THRESHOLD_MASK) >>
                 LIQUIDATION_THRESHOLD_START_BIT_POSITION,
-            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>
+            (dataLocal & LIQUIDATION_BONUS_MASK) >>
                 LIQUIDATION_BONUS_START_BIT_POSITION,
-            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
-            (dataLocal & ~RESERVE_FACTOR_MASK) >>
+            (dataLocal & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
+            (dataLocal & RESERVE_FACTOR_MASK) >>
                 RESERVE_FACTOR_START_BIT_POSITION
         );
     }
@@ -637,8 +641,8 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
-            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
+            (dataLocal & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
+            (dataLocal & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
         );
     }
 }
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ReserveLogic.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ReserveLogic.sol
index 54e3c0e..5feeea6 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ReserveLogic.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ReserveLogic.sol
@@ -101,7 +101,9 @@ library ReserveLogic {
     ) internal {
         // If time didn't pass since last stored timestamp, skip state update
         //solium-disable-next-line
-        if (reserve.lastUpdateTimestamp == uint40(block.timestamp)) {
+        if (
+            reserveCache.reserveLastUpdateTimestamp == uint40(block.timestamp)
+        ) {
             return;
         }
 
@@ -110,6 +112,7 @@ library ReserveLogic {
 
         //solium-disable-next-line
         reserve.lastUpdateTimestamp = uint40(block.timestamp);
+        reserveCache.reserveLastUpdateTimestamp = uint40(block.timestamp);
     }
 
     /**
@@ -183,14 +186,14 @@ library ReserveLogic {
         ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)
                 .calculateInterestRates(
                     DataTypes.CalculateInterestRatesParams({
-                        unbacked: reserve.unbacked,
+                        unbacked: reserve.unbacked + reserve.deficit,
                         liquidityAdded: liquidityAdded,
                         liquidityTaken: liquidityTaken,
                         totalDebt: totalVariableDebt,
                         reserveFactor: reserveCache.reserveFactor,
                         reserve: reserveAddress,
-                        usingVirtualBalance: reserve
-                            .configuration
+                        usingVirtualBalance: reserveCache
+                            .reserveConfiguration
                             .getIsVirtualAccActive(),
                         virtualUnderlyingBalance: reserve
                             .virtualUnderlyingBalance
@@ -201,7 +204,7 @@ library ReserveLogic {
         reserve.currentVariableBorrowRate = nextVariableRate.toUint128();
 
         // Only affect virtual balance if the reserve uses it
-        if (reserve.configuration.getIsVirtualAccActive()) {
+        if (reserveCache.reserveConfiguration.getIsVirtualAccActive()) {
             if (liquidityAdded > 0) {
                 reserve.virtualUnderlyingBalance += liquidityAdded.toUint128();
             }
diff --git a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ValidationLogic.sol b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ValidationLogic.sol
index 64aa0db..c50d1f5 100644
--- a/tmp/534352_0xA58FB47bE9074828215A173564C0CD10f6F249bf_flat/ValidationLogic.sol
+++ b/tmp/534352_0xf8C97539934ee66a67C26010e8e027D77E821B0C_flat/ValidationLogic.sol
@@ -4,8 +4,6 @@ pragma solidity ^0.8.10;
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {Address} from "../../../dependencies/openzeppelin/contracts/Address.sol";
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
-import {IReserveInterestRateStrategy} from "../../../interfaces/IReserveInterestRateStrategy.sol";
-import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
 import {IPriceOracleGetter} from "../../../interfaces/IPriceOracleGetter.sol";
 import {IAToken} from "../../../interfaces/IAToken.sol";
 import {IPriceOracleSentinel} from "../../../interfaces/IPriceOracleSentinel.sol";
@@ -24,7 +22,7 @@ import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.so
 import {IncentivizedERC20} from "../../tokenization/base/IncentivizedERC20.sol";
 
 /**
- * @title ReserveLogic library
+ * @title ValidationLogic library
  * @author Aave
  * @notice Implements functions to validate the different actions of the protocol
  */
