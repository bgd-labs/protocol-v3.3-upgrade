===================================================================
--- src/contracts/helpers/AaveProtocolDataProvider.sol
+++ lib/aave-v3-origin/src/contracts/helpers/AaveProtocolDataProvider.sol
@@ -78,13 +78,12 @@
         IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
         address[] memory reserves = pool.getReservesList();
         TokenData[] memory aTokens = new TokenData[](reserves.length);
         for (uint256 i = 0; i < reserves.length; i++) {
-            DataTypes.ReserveDataLegacy memory reserveData = pool
-                .getReserveData(reserves[i]);
+            address aTokenAddress = pool.getReserveAToken(reserves[i]);
             aTokens[i] = TokenData({
-                symbol: IERC20Detailed(reserveData.aTokenAddress).symbol(),
-                tokenAddress: reserveData.aTokenAddress
+                symbol: IERC20Detailed(aTokenAddress).symbol(),
+                tokenAddress: aTokenAddress
             });
         }
         return aTokens;
     }
@@ -202,14 +201,14 @@
         returns (
             uint256 unbacked,
             uint256 accruedToTreasuryScaled,
             uint256 totalAToken,
-            uint256 totalStableDebt,
+            uint256,
             uint256 totalVariableDebt,
             uint256 liquidityRate,
             uint256 variableBorrowRate,
-            uint256 stableBorrowRate,
-            uint256 averageStableBorrowRate,
+            uint256,
+            uint256,
             uint256 liquidityIndex,
             uint256 variableBorrowIndex,
             uint40 lastUpdateTimestamp
         )
@@ -238,22 +237,20 @@
     /// @inheritdoc IPoolDataProvider
     function getATokenTotalSupply(
         address asset
     ) external view override returns (uint256) {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-        return IERC20Detailed(reserve.aTokenAddress).totalSupply();
+        address aTokenAddress = IPool(ADDRESSES_PROVIDER.getPool())
+            .getReserveAToken(asset);
+        return IERC20Detailed(aTokenAddress).totalSupply();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getTotalDebt(
         address asset
     ) external view override returns (uint256) {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-        return IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply();
+        address variableDebtTokenAddress = IPool(ADDRESSES_PROVIDER.getPool())
+            .getReserveVariableDebtToken(asset);
+        return IERC20Detailed(variableDebtTokenAddress).totalSupply();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getUserReserveData(
@@ -311,17 +308,15 @@
             address stableDebtTokenAddress,
             address variableDebtTokenAddress
         )
     {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
+        IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
 
         // @notice all stable debt related parameters deprecated in v3.2.0
         return (
-            reserve.aTokenAddress,
+            pool.getReserveAToken(asset),
             address(0),
-            reserve.variableDebtTokenAddress
+            pool.getReserveVariableDebtToken(asset)
         );
     }
 
     /// @inheritdoc IPoolDataProvider
@@ -365,5 +360,12 @@
             IPool(ADDRESSES_PROVIDER.getPool()).getVirtualUnderlyingBalance(
                 asset
             );
     }
+
+    /// @inheritdoc IPoolDataProvider
+    function getReserveDeficit(
+        address asset
+    ) external view override returns (uint256) {
+        return IPool(ADDRESSES_PROVIDER.getPool()).getReserveDeficit(asset);
+    }
 }
