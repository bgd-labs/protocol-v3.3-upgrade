===================================================================
--- src/contracts/protocol/libraries/logic/ReserveLogic.sol
+++ lib/aave-v3-origin/src/contracts/protocol/libraries/logic/ReserveLogic.sol
@@ -100,17 +100,20 @@
         DataTypes.ReserveCache memory reserveCache
     ) internal {
         // If time didn't pass since last stored timestamp, skip state update
         //solium-disable-next-line
-        if (reserve.lastUpdateTimestamp == uint40(block.timestamp)) {
+        if (
+            reserveCache.reserveLastUpdateTimestamp == uint40(block.timestamp)
+        ) {
             return;
         }
 
         _updateIndexes(reserve, reserveCache);
         _accrueToTreasury(reserve, reserveCache);
 
         //solium-disable-next-line
         reserve.lastUpdateTimestamp = uint40(block.timestamp);
+        reserveCache.reserveLastUpdateTimestamp = uint40(block.timestamp);
     }
 
     /**
      * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example
@@ -182,16 +185,16 @@
             uint256 nextVariableRate
         ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)
                 .calculateInterestRates(
                     DataTypes.CalculateInterestRatesParams({
-                        unbacked: reserve.unbacked,
+                        unbacked: reserve.unbacked + reserve.deficit,
                         liquidityAdded: liquidityAdded,
                         liquidityTaken: liquidityTaken,
                         totalDebt: totalVariableDebt,
                         reserveFactor: reserveCache.reserveFactor,
                         reserve: reserveAddress,
-                        usingVirtualBalance: reserve
-                            .configuration
+                        usingVirtualBalance: reserveCache
+                            .reserveConfiguration
                             .getIsVirtualAccActive(),
                         virtualUnderlyingBalance: reserve
                             .virtualUnderlyingBalance
                     })
@@ -200,9 +203,9 @@
         reserve.currentLiquidityRate = nextLiquidityRate.toUint128();
         reserve.currentVariableBorrowRate = nextVariableRate.toUint128();
 
         // Only affect virtual balance if the reserve uses it
-        if (reserve.configuration.getIsVirtualAccActive()) {
+        if (reserveCache.reserveConfiguration.getIsVirtualAccActive()) {
             if (liquidityAdded > 0) {
                 reserve.virtualUnderlyingBalance += liquidityAdded.toUint128();
             }
             if (liquidityTaken > 0) {
