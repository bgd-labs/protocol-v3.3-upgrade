diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ConfiguratorLogic.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol
index 2ed9c96..3a54fe8 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ConfiguratorLogic.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol
@@ -127,12 +127,11 @@ library ConfiguratorLogic {
         IPool cachedPool,
         ConfiguratorInputTypes.UpdateATokenInput calldata input
     ) external {
-        DataTypes.ReserveDataLegacy memory reserveData = cachedPool
-            .getReserveData(input.asset);
+        address aTokenAddress = cachedPool.getReserveAToken(input.asset);
 
-        (, , , uint256 decimals, ) = cachedPool
+        uint256 decimals = cachedPool
             .getConfiguration(input.asset)
-            .getParams();
+            .getDecimals();
 
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableAToken.initialize.selector,
@@ -147,16 +146,12 @@ library ConfiguratorLogic {
         );
 
         _upgradeTokenImplementation(
-            reserveData.aTokenAddress,
+            aTokenAddress,
             input.implementation,
             encodedCall
         );
 
-        emit ATokenUpgraded(
-            input.asset,
-            reserveData.aTokenAddress,
-            input.implementation
-        );
+        emit ATokenUpgraded(input.asset, aTokenAddress, input.implementation);
     }
 
     /**
@@ -169,12 +164,12 @@ library ConfiguratorLogic {
         IPool cachedPool,
         ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
     ) external {
-        DataTypes.ReserveDataLegacy memory reserveData = cachedPool
-            .getReserveData(input.asset);
+        address variableDebtTokenAddress = cachedPool
+            .getReserveVariableDebtToken(input.asset);
 
-        (, , , uint256 decimals, ) = cachedPool
+        uint256 decimals = cachedPool
             .getConfiguration(input.asset)
-            .getParams();
+            .getDecimals();
 
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableDebtToken.initialize.selector,
@@ -188,14 +183,14 @@ library ConfiguratorLogic {
         );
 
         _upgradeTokenImplementation(
-            reserveData.variableDebtTokenAddress,
+            variableDebtTokenAddress,
             input.implementation,
             encodedCall
         );
 
         emit VariableDebtTokenUpgraded(
             input.asset,
-            reserveData.variableDebtTokenAddress,
+            variableDebtTokenAddress,
             input.implementation
         );
     }
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/DataTypes.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol
index 3eb4af3..15d6b49 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/DataTypes.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol
@@ -50,8 +50,9 @@ library DataTypes {
         uint128 variableBorrowIndex;
         //the current variable borrow rate. Expressed in ray
         uint128 currentVariableBorrowRate;
-        // DEPRECATED on v3.2.0
-        uint128 __deprecatedStableBorrowRate;
+        /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+        // the current accumulate deficit in underlying tokens
+        uint128 deficit;
         //timestamp of last update
         uint40 lastUpdateTimestamp;
         //the id of the reserve. Represents the position in the list of the active reserves
@@ -217,6 +218,11 @@ library DataTypes {
         uint8 userEModeCategory;
     }
 
+    struct ExecuteEliminateDeficitParams {
+        address asset;
+        uint256 amount;
+    }
+
     struct ExecuteSetUserEModeParams {
         uint256 reservesCount;
         address oracle;
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/EModeConfiguration.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol
index 2b0489a..5f687dc 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/EModeConfiguration.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol
@@ -2,7 +2,6 @@
 pragma solidity ^0.8.0;
 
 import {Errors} from "../helpers/Errors.sol";
-import {DataTypes} from "../types/DataTypes.sol";
 import {ReserveConfiguration} from "./ReserveConfiguration.sol";
 
 /**
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/Errors.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol
index d2a0c13..eb8c305 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/Errors.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol
@@ -101,4 +101,8 @@ library Errors {
     string public constant INVALID_GRACE_PERIOD = "98"; // Grace period above a valid range
     string public constant INVALID_FREEZE_STATE = "99"; // Reserve is already in the passed freeze state
     string public constant NOT_BORROWABLE_IN_EMODE = "100"; // Asset not borrowable in eMode
+    string public constant CALLER_NOT_UMBRELLA = "101"; // The caller of the function is not the umbrella contract
+    string public constant RESERVE_NOT_IN_DEFICIT = "102"; // The reserve is not in deficit
+    string public constant MUST_NOT_LEAVE_DUST = "103"; // Below a certain threshold liquidators need to take the full position
+    string public constant USER_CANNOT_HAVE_DEBT = "104"; // Thrown when a user tries to interact with a method that requires a position without debt
 }
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPool.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol
index ab70b8f..8c6fa9a 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPool.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol
@@ -204,6 +204,18 @@ interface IPool {
         uint256 variableBorrowIndex
     );
 
+    /**
+     * @dev Emitted when the deficit of a reserve is covered.
+     * @param reserve The address of the underlying asset of the reserve
+     * @param caller The caller that triggered the DeficitCovered event
+     * @param amountCovered The amount of deficit covered
+     */
+    event DeficitCovered(
+        address indexed reserve,
+        address caller,
+        uint256 amountCovered
+    );
+
     /**
      * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
      * @param reserve The address of the reserve
@@ -211,6 +223,18 @@ interface IPool {
      */
     event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
+    /**
+     * @dev Emitted when deficit is realized on a liquidation.
+     * @param user The user address where the bad debt will be burned
+     * @param debtAsset The address of the underlying borrowed asset to be burned
+     * @param amountCreated The amount of deficit created
+     */
+    event DeficitCreated(
+        address indexed user,
+        address indexed debtAsset,
+        uint256 amountCreated
+    );
+
     /**
      * @notice Mints an `amount` of aTokens to the `onBehalfOf`
      * @param asset The address of the underlying asset to mint
@@ -600,16 +624,6 @@ interface IPool {
         address asset
     ) external view returns (DataTypes.ReserveDataLegacy memory);
 
-    /**
-     * @notice Returns the state and configuration of the reserve, including extra data included with Aave v3.1
-     * @dev DEPRECATED use independent getters instead (getReserveData, getLiquidationGracePeriod)
-     * @param asset The address of the underlying asset of the reserve
-     * @return The state and configuration data of the reserve with virtual accounting
-     */
-    function getReserveDataExtended(
-        address asset
-    ) external view returns (DataTypes.ReserveData memory);
-
     /**
      * @notice Returns the virtual underlying balance of the reserve
      * @param asset The address of the underlying asset of the reserve
@@ -801,7 +815,9 @@ interface IPool {
      * @param asset The address of the underlying asset
      * @return Timestamp when the liquidation grace period will end
      **/
-    function getLiquidationGracePeriod(address asset) external returns (uint40);
+    function getLiquidationGracePeriod(
+        address asset
+    ) external view returns (uint40);
 
     /**
      * @notice Returns the total fee on flash loans
@@ -860,6 +876,39 @@ interface IPool {
         uint16 referralCode
     ) external;
 
+    /**
+     * @notice It covers the deficit of a specified reserve by burning:
+     * - the equivalent aToken `amount` for assets with virtual accounting enabled
+     * - the equivalent `amount` of underlying for assets with virtual accounting disabled (e.g. GHO)
+     * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+     * @param asset The address of the underlying asset to cover the deficit.
+     * @param amount The amount to be covered, in aToken or underlying on non-virtual accounted assets
+     */
+    function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+    /**
+     * @notice Returns the current deficit of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The current deficit of the reserve
+     */
+    function getReserveDeficit(address asset) external view returns (uint256);
+
+    /**
+     * @notice Returns the aToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the aToken
+     */
+    function getReserveAToken(address asset) external view returns (address);
+
+    /**
+     * @notice Returns the variableDebtToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the variableDebtToken
+     */
+    function getReserveVariableDebtToken(
+        address asset
+    ) external view returns (address);
+
     /**
      * @notice Gets the address of the external FlashLoanLogic
      */
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPoolDataProvider.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol
index d94bdcd..c4f8cb7 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPoolDataProvider.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol
@@ -256,4 +256,11 @@ interface IPoolDataProvider {
     function getVirtualUnderlyingBalance(
         address asset
     ) external view returns (uint256);
+
+    /**
+     * @notice Returns the deficit of the reserve
+     * @param asset The address of the underlying asset of the reserve
+     * @return The reserve deficit
+     */
+    function getReserveDeficit(address asset) external view returns (uint256);
 }
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfigurator.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol
index 32ef167..bca57da 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfigurator.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol
@@ -15,8 +15,6 @@ import {IPoolConfigurator} from "../../interfaces/IPoolConfigurator.sol";
 import {IPool} from "../../interfaces/IPool.sol";
 import {IACLManager} from "../../interfaces/IACLManager.sol";
 import {IPoolDataProvider} from "../../interfaces/IPoolDataProvider.sol";
-import {IERC20} from "../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {IERC20Detailed} from "../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
 
 /**
  * @title PoolConfigurator
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfiguratorInstance.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol
index 3a1afbd..cdb0a93 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfiguratorInstance.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol
@@ -4,7 +4,7 @@ pragma solidity ^0.8.0;
 import {PoolConfigurator, IPoolAddressesProvider, IPool, VersionedInitializable} from "../protocol/pool/PoolConfigurator.sol";
 
 contract PoolConfiguratorInstance is PoolConfigurator {
-    uint256 public constant CONFIGURATOR_REVISION = 4;
+    uint256 public constant CONFIGURATOR_REVISION = 5;
 
     /// @inheritdoc VersionedInitializable
     function getRevision() internal pure virtual override returns (uint256) {
diff --git a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ReserveConfiguration.sol b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol
index a7849b1..a21e5aa 100644
--- a/tmp/534352_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ReserveConfiguration.sol
+++ b/tmp/534352_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol
@@ -10,26 +10,26 @@ import {DataTypes} from "../types/DataTypes.sol";
  * @notice Implements the bitmap logic to handle the reserve configuration
  */
 library ReserveConfiguration {
-    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore
-    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore
-    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore
-    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
+    uint256 internal constant LTV_MASK =                       0x000000000000000000000000000000000000000000000000000000000000FFFF; // prettier-ignore
+    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0x00000000000000000000000000000000000000000000000000000000FFFF0000; // prettier-ignore
+    uint256 internal constant LIQUIDATION_BONUS_MASK =         0x0000000000000000000000000000000000000000000000000000FFFF00000000; // prettier-ignore
+    uint256 internal constant DECIMALS_MASK =                  0x00000000000000000000000000000000000000000000000000FF000000000000; // prettier-ignore
+    uint256 internal constant ACTIVE_MASK =                    0x0000000000000000000000000000000000000000000000000100000000000000; // prettier-ignore
+    uint256 internal constant FROZEN_MASK =                    0x0000000000000000000000000000000000000000000000000200000000000000; // prettier-ignore
+    uint256 internal constant BORROWING_MASK =                 0x0000000000000000000000000000000000000000000000000400000000000000; // prettier-ignore
     // @notice there is an unoccupied hole of 1 bit at position 59 from pre 3.2 stableBorrowRateEnabled
-    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    // @notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
-    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =        0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+    uint256 internal constant PAUSED_MASK =                    0x0000000000000000000000000000000000000000000000001000000000000000; // prettier-ignore
+    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0x0000000000000000000000000000000000000000000000002000000000000000; // prettier-ignore
+    uint256 internal constant SILOED_BORROWING_MASK =          0x0000000000000000000000000000000000000000000000004000000000000000; // prettier-ignore
+    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0x0000000000000000000000000000000000000000000000008000000000000000; // prettier-ignore
+    uint256 internal constant RESERVE_FACTOR_MASK =            0x00000000000000000000000000000000000000000000FFFF0000000000000000; // prettier-ignore
+    uint256 internal constant BORROW_CAP_MASK =                0x00000000000000000000000000000000000FFFFFFFFF00000000000000000000; // prettier-ignore
+    uint256 internal constant SUPPLY_CAP_MASK =                0x00000000000000000000000000FFFFFFFFF00000000000000000000000000000; // prettier-ignore
+    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0x0000000000000000000000FFFF00000000000000000000000000000000000000; // prettier-ignore
+    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
+    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0x00000000000FFFFFFFFF00000000000000000000000000000000000000000000; // prettier-ignore
+    uint256 internal constant DEBT_CEILING_MASK =              0x0FFFFFFFFFF00000000000000000000000000000000000000000000000000000; // prettier-ignore
+    uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =        0x1000000000000000000000000000000000000000000000000000000000000000; // prettier-ignore
 
     /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
     uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;
@@ -76,7 +76,7 @@ library ReserveConfiguration {
     ) internal pure {
         require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);
 
-        self.data = (self.data & LTV_MASK) | ltv;
+        self.data = (self.data & ~LTV_MASK) | ltv;
     }
 
     /**
@@ -87,7 +87,7 @@ library ReserveConfiguration {
     function getLtv(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return self.data & ~LTV_MASK;
+        return self.data & LTV_MASK;
     }
 
     /**
@@ -105,7 +105,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_THRESHOLD_MASK) |
+            (self.data & ~LIQUIDATION_THRESHOLD_MASK) |
             (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);
     }
 
@@ -118,7 +118,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>
+            (self.data & LIQUIDATION_THRESHOLD_MASK) >>
             LIQUIDATION_THRESHOLD_START_BIT_POSITION;
     }
 
@@ -134,7 +134,7 @@ library ReserveConfiguration {
         require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);
 
         self.data =
-            (self.data & LIQUIDATION_BONUS_MASK) |
+            (self.data & ~LIQUIDATION_BONUS_MASK) |
             (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
     }
 
@@ -147,7 +147,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_BONUS_MASK) >>
+            (self.data & LIQUIDATION_BONUS_MASK) >>
             LIQUIDATION_BONUS_START_BIT_POSITION;
     }
 
@@ -163,7 +163,7 @@ library ReserveConfiguration {
         require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);
 
         self.data =
-            (self.data & DECIMALS_MASK) |
+            (self.data & ~DECIMALS_MASK) |
             (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
     }
 
@@ -176,7 +176,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
+            (self.data & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
     }
 
     /**
@@ -189,7 +189,7 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & ACTIVE_MASK) |
+            (self.data & ~ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);
     }
 
@@ -201,7 +201,7 @@ library ReserveConfiguration {
     function getActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~ACTIVE_MASK) != 0;
+        return (self.data & ACTIVE_MASK) != 0;
     }
 
     /**
@@ -214,7 +214,7 @@ library ReserveConfiguration {
         bool frozen
     ) internal pure {
         self.data =
-            (self.data & FROZEN_MASK) |
+            (self.data & ~FROZEN_MASK) |
             (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);
     }
 
@@ -226,7 +226,7 @@ library ReserveConfiguration {
     function getFrozen(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FROZEN_MASK) != 0;
+        return (self.data & FROZEN_MASK) != 0;
     }
 
     /**
@@ -239,7 +239,7 @@ library ReserveConfiguration {
         bool paused
     ) internal pure {
         self.data =
-            (self.data & PAUSED_MASK) |
+            (self.data & ~PAUSED_MASK) |
             (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);
     }
 
@@ -251,7 +251,7 @@ library ReserveConfiguration {
     function getPaused(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~PAUSED_MASK) != 0;
+        return (self.data & PAUSED_MASK) != 0;
     }
 
     /**
@@ -268,7 +268,7 @@ library ReserveConfiguration {
         bool borrowable
     ) internal pure {
         self.data =
-            (self.data & BORROWABLE_IN_ISOLATION_MASK) |
+            (self.data & ~BORROWABLE_IN_ISOLATION_MASK) |
             (uint256(borrowable ? 1 : 0) <<
                 BORROWABLE_IN_ISOLATION_START_BIT_POSITION);
     }
@@ -285,7 +285,7 @@ library ReserveConfiguration {
     function getBorrowableInIsolation(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;
+        return (self.data & BORROWABLE_IN_ISOLATION_MASK) != 0;
     }
 
     /**
@@ -299,7 +299,7 @@ library ReserveConfiguration {
         bool siloed
     ) internal pure {
         self.data =
-            (self.data & SILOED_BORROWING_MASK) |
+            (self.data & ~SILOED_BORROWING_MASK) |
             (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);
     }
 
@@ -312,7 +312,7 @@ library ReserveConfiguration {
     function getSiloedBorrowing(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~SILOED_BORROWING_MASK) != 0;
+        return (self.data & SILOED_BORROWING_MASK) != 0;
     }
 
     /**
@@ -325,7 +325,7 @@ library ReserveConfiguration {
         bool enabled
     ) internal pure {
         self.data =
-            (self.data & BORROWING_MASK) |
+            (self.data & ~BORROWING_MASK) |
             (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);
     }
 
@@ -337,7 +337,7 @@ library ReserveConfiguration {
     function getBorrowingEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWING_MASK) != 0;
+        return (self.data & BORROWING_MASK) != 0;
     }
 
     /**
@@ -355,7 +355,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & RESERVE_FACTOR_MASK) |
+            (self.data & ~RESERVE_FACTOR_MASK) |
             (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);
     }
 
@@ -368,7 +368,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~RESERVE_FACTOR_MASK) >>
+            (self.data & RESERVE_FACTOR_MASK) >>
             RESERVE_FACTOR_START_BIT_POSITION;
     }
 
@@ -384,7 +384,7 @@ library ReserveConfiguration {
         require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);
 
         self.data =
-            (self.data & BORROW_CAP_MASK) |
+            (self.data & ~BORROW_CAP_MASK) |
             (borrowCap << BORROW_CAP_START_BIT_POSITION);
     }
 
@@ -396,7 +396,7 @@ library ReserveConfiguration {
     function getBorrowCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
+        return (self.data & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -411,7 +411,7 @@ library ReserveConfiguration {
         require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);
 
         self.data =
-            (self.data & SUPPLY_CAP_MASK) |
+            (self.data & ~SUPPLY_CAP_MASK) |
             (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
     }
 
@@ -423,7 +423,7 @@ library ReserveConfiguration {
     function getSupplyCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
+        return (self.data & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -438,7 +438,7 @@ library ReserveConfiguration {
         require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);
 
         self.data =
-            (self.data & DEBT_CEILING_MASK) |
+            (self.data & ~DEBT_CEILING_MASK) |
             (ceiling << DEBT_CEILING_START_BIT_POSITION);
     }
 
@@ -451,7 +451,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
+            (self.data & DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
     }
 
     /**
@@ -469,7 +469,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |
+            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) |
             (liquidationProtocolFee <<
                 LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);
     }
@@ -483,7 +483,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>
+            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) >>
             LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
     }
 
@@ -502,7 +502,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & UNBACKED_MINT_CAP_MASK) |
+            (self.data & ~UNBACKED_MINT_CAP_MASK) |
             (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
     }
 
@@ -515,7 +515,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~UNBACKED_MINT_CAP_MASK) >>
+            (self.data & UNBACKED_MINT_CAP_MASK) >>
             UNBACKED_MINT_CAP_START_BIT_POSITION;
     }
 
@@ -529,7 +529,7 @@ library ReserveConfiguration {
         bool flashLoanEnabled
     ) internal pure {
         self.data =
-            (self.data & FLASHLOAN_ENABLED_MASK) |
+            (self.data & ~FLASHLOAN_ENABLED_MASK) |
             (uint256(flashLoanEnabled ? 1 : 0) <<
                 FLASHLOAN_ENABLED_START_BIT_POSITION);
     }
@@ -542,7 +542,7 @@ library ReserveConfiguration {
     function getFlashLoanEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;
+        return (self.data & FLASHLOAN_ENABLED_MASK) != 0;
     }
 
     /**
@@ -555,21 +555,24 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & VIRTUAL_ACC_ACTIVE_MASK) |
+            (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << VIRTUAL_ACC_START_BIT_POSITION);
     }
 
     /**
      * @notice Gets the virtual account active/not state of the reserve
      * @dev The state should be true for all normal assets and should be false
-     *  only in special cases (ex. GHO) where an asset is minted instead of supplied.
+     * Virtual accounting being disabled means that the asset:
+     * - is GHO
+     * - can never be supplied
+     * - the interest rate strategy is not influenced by the virtual balance
      * @param self The reserve configuration
      * @return The active state
      */
     function getIsVirtualAccActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) != 0;
+        return (self.data & VIRTUAL_ACC_ACTIVE_MASK) != 0;
     }
 
     /**
@@ -586,10 +589,10 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~ACTIVE_MASK) != 0,
-            (dataLocal & ~FROZEN_MASK) != 0,
-            (dataLocal & ~BORROWING_MASK) != 0,
-            (dataLocal & ~PAUSED_MASK) != 0
+            (dataLocal & ACTIVE_MASK) != 0,
+            (dataLocal & FROZEN_MASK) != 0,
+            (dataLocal & BORROWING_MASK) != 0,
+            (dataLocal & PAUSED_MASK) != 0
         );
     }
 
@@ -608,13 +611,13 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            dataLocal & ~LTV_MASK,
-            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>
+            dataLocal & LTV_MASK,
+            (dataLocal & LIQUIDATION_THRESHOLD_MASK) >>
                 LIQUIDATION_THRESHOLD_START_BIT_POSITION,
-            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>
+            (dataLocal & LIQUIDATION_BONUS_MASK) >>
                 LIQUIDATION_BONUS_START_BIT_POSITION,
-            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
-            (dataLocal & ~RESERVE_FACTOR_MASK) >>
+            (dataLocal & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
+            (dataLocal & RESERVE_FACTOR_MASK) >>
                 RESERVE_FACTOR_START_BIT_POSITION
         );
     }
@@ -631,8 +634,8 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
-            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
+            (dataLocal & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
+            (dataLocal & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
         );
     }
 }
