diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ConfiguratorLogic.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol
index 2ed9c96..3a54fe8 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ConfiguratorLogic.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol
@@ -127,12 +127,11 @@ library ConfiguratorLogic {
         IPool cachedPool,
         ConfiguratorInputTypes.UpdateATokenInput calldata input
     ) external {
-        DataTypes.ReserveDataLegacy memory reserveData = cachedPool
-            .getReserveData(input.asset);
+        address aTokenAddress = cachedPool.getReserveAToken(input.asset);
 
-        (, , , uint256 decimals, ) = cachedPool
+        uint256 decimals = cachedPool
             .getConfiguration(input.asset)
-            .getParams();
+            .getDecimals();
 
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableAToken.initialize.selector,
@@ -147,16 +146,12 @@ library ConfiguratorLogic {
         );
 
         _upgradeTokenImplementation(
-            reserveData.aTokenAddress,
+            aTokenAddress,
             input.implementation,
             encodedCall
         );
 
-        emit ATokenUpgraded(
-            input.asset,
-            reserveData.aTokenAddress,
-            input.implementation
-        );
+        emit ATokenUpgraded(input.asset, aTokenAddress, input.implementation);
     }
 
     /**
@@ -169,12 +164,12 @@ library ConfiguratorLogic {
         IPool cachedPool,
         ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
     ) external {
-        DataTypes.ReserveDataLegacy memory reserveData = cachedPool
-            .getReserveData(input.asset);
+        address variableDebtTokenAddress = cachedPool
+            .getReserveVariableDebtToken(input.asset);
 
-        (, , , uint256 decimals, ) = cachedPool
+        uint256 decimals = cachedPool
             .getConfiguration(input.asset)
-            .getParams();
+            .getDecimals();
 
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableDebtToken.initialize.selector,
@@ -188,14 +183,14 @@ library ConfiguratorLogic {
         );
 
         _upgradeTokenImplementation(
-            reserveData.variableDebtTokenAddress,
+            variableDebtTokenAddress,
             input.implementation,
             encodedCall
         );
 
         emit VariableDebtTokenUpgraded(
             input.asset,
-            reserveData.variableDebtTokenAddress,
+            variableDebtTokenAddress,
             input.implementation
         );
     }
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/DataTypes.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol
index 45b226c..8e5b1a9 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/DataTypes.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol
@@ -50,8 +50,9 @@ library DataTypes {
         uint128 variableBorrowIndex;
         //the current variable borrow rate. Expressed in ray
         uint128 currentVariableBorrowRate;
-        // DEPRECATED on v3.2.0
-        uint128 __deprecatedStableBorrowRate;
+        /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+        // the current accumulate deficit in underlying tokens
+        uint128 deficit;
         //timestamp of last update
         uint40 lastUpdateTimestamp;
         //the id of the reserve. Represents the position in the list of the active reserves
@@ -216,6 +217,11 @@ library DataTypes {
         uint8 userEModeCategory;
     }
 
+    struct ExecuteEliminateDeficitParams {
+        address asset;
+        uint256 amount;
+    }
+
     struct ExecuteSetUserEModeParams {
         uint256 reservesCount;
         address oracle;
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/EModeConfiguration.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol
index 2b0489a..5f687dc 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/EModeConfiguration.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol
@@ -2,7 +2,6 @@
 pragma solidity ^0.8.0;
 
 import {Errors} from "../helpers/Errors.sol";
-import {DataTypes} from "../types/DataTypes.sol";
 import {ReserveConfiguration} from "./ReserveConfiguration.sol";
 
 /**
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/Errors.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol
index d2a0c13..eb8c305 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/Errors.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol
@@ -101,4 +101,8 @@ library Errors {
     string public constant INVALID_GRACE_PERIOD = "98"; // Grace period above a valid range
     string public constant INVALID_FREEZE_STATE = "99"; // Reserve is already in the passed freeze state
     string public constant NOT_BORROWABLE_IN_EMODE = "100"; // Asset not borrowable in eMode
+    string public constant CALLER_NOT_UMBRELLA = "101"; // The caller of the function is not the umbrella contract
+    string public constant RESERVE_NOT_IN_DEFICIT = "102"; // The reserve is not in deficit
+    string public constant MUST_NOT_LEAVE_DUST = "103"; // Below a certain threshold liquidators need to take the full position
+    string public constant USER_CANNOT_HAVE_DEBT = "104"; // Thrown when a user tries to interact with a method that requires a position without debt
 }
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPool.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol
index 90f5c18..f0ed8d2 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPool.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol
@@ -204,6 +204,18 @@ interface IPool {
         uint256 variableBorrowIndex
     );
 
+    /**
+     * @dev Emitted when the deficit of a reserve is covered.
+     * @param reserve The address of the underlying asset of the reserve
+     * @param caller The caller that triggered the DeficitCovered event
+     * @param amountCovered The amount of deficit covered
+     */
+    event DeficitCovered(
+        address indexed reserve,
+        address caller,
+        uint256 amountCovered
+    );
+
     /**
      * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
      * @param reserve The address of the reserve
@@ -211,6 +223,18 @@ interface IPool {
      */
     event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
+    /**
+     * @dev Emitted when deficit is realized on a liquidation.
+     * @param user The user address where the bad debt will be burned
+     * @param debtAsset The address of the underlying borrowed asset to be burned
+     * @param amountCreated The amount of deficit created
+     */
+    event DeficitCreated(
+        address indexed user,
+        address indexed debtAsset,
+        uint256 amountCreated
+    );
+
     /**
      * @notice Mints an `amount` of aTokens to the `onBehalfOf`
      * @param asset The address of the underlying asset to mint
@@ -600,16 +624,6 @@ interface IPool {
         address asset
     ) external view returns (DataTypes.ReserveDataLegacy memory);
 
-    /**
-     * @notice Returns the state and configuration of the reserve, including extra data included with Aave v3.1
-     * @dev DEPRECATED use independent getters instead (getReserveData, getLiquidationGracePeriod)
-     * @param asset The address of the underlying asset of the reserve
-     * @return The state and configuration data of the reserve with virtual accounting
-     */
-    function getReserveDataExtended(
-        address asset
-    ) external view returns (DataTypes.ReserveData memory);
-
     /**
      * @notice Returns the virtual underlying balance of the reserve
      * @param asset The address of the underlying asset of the reserve
@@ -803,7 +817,9 @@ interface IPool {
      * @return Timestamp when the liquidation grace period will end
      *
      */
-    function getLiquidationGracePeriod(address asset) external returns (uint40);
+    function getLiquidationGracePeriod(
+        address asset
+    ) external view returns (uint40);
 
     /**
      * @notice Returns the total fee on flash loans
@@ -862,6 +878,39 @@ interface IPool {
         uint16 referralCode
     ) external;
 
+    /**
+     * @notice It covers the deficit of a specified reserve by burning:
+     * - the equivalent aToken `amount` for assets with virtual accounting enabled
+     * - the equivalent `amount` of underlying for assets with virtual accounting disabled (e.g. GHO)
+     * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+     * @param asset The address of the underlying asset to cover the deficit.
+     * @param amount The amount to be covered, in aToken or underlying on non-virtual accounted assets
+     */
+    function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+    /**
+     * @notice Returns the current deficit of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The current deficit of the reserve
+     */
+    function getReserveDeficit(address asset) external view returns (uint256);
+
+    /**
+     * @notice Returns the aToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the aToken
+     */
+    function getReserveAToken(address asset) external view returns (address);
+
+    /**
+     * @notice Returns the variableDebtToken address of a reserve.
+     * @param asset The address of the underlying asset of the reserve
+     * @return The address of the variableDebtToken
+     */
+    function getReserveVariableDebtToken(
+        address asset
+    ) external view returns (address);
+
     /**
      * @notice Gets the address of the external FlashLoanLogic
      */
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPoolDataProvider.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol
index d94bdcd..c4f8cb7 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/IPoolDataProvider.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol
@@ -256,4 +256,11 @@ interface IPoolDataProvider {
     function getVirtualUnderlyingBalance(
         address asset
     ) external view returns (uint256);
+
+    /**
+     * @notice Returns the deficit of the reserve
+     * @param asset The address of the underlying asset of the reserve
+     * @return The reserve deficit
+     */
+    function getReserveDeficit(address asset) external view returns (uint256);
 }
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfigurator.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol
index 32ef167..e69de29 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfigurator.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol
@@ -1,774 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity ^0.8.10;
-
-import {VersionedInitializable} from "../../misc/aave-upgradeability/VersionedInitializable.sol";
-import {ReserveConfiguration} from "../libraries/configuration/ReserveConfiguration.sol";
-import {EModeConfiguration} from "../libraries/configuration/EModeConfiguration.sol";
-import {IPoolAddressesProvider} from "../../interfaces/IPoolAddressesProvider.sol";
-import {IDefaultInterestRateStrategyV2} from "../../interfaces/IDefaultInterestRateStrategyV2.sol";
-import {Errors} from "../libraries/helpers/Errors.sol";
-import {PercentageMath} from "../libraries/math/PercentageMath.sol";
-import {DataTypes} from "../libraries/types/DataTypes.sol";
-import {ConfiguratorLogic} from "../libraries/logic/ConfiguratorLogic.sol";
-import {ConfiguratorInputTypes} from "../libraries/types/ConfiguratorInputTypes.sol";
-import {IPoolConfigurator} from "../../interfaces/IPoolConfigurator.sol";
-import {IPool} from "../../interfaces/IPool.sol";
-import {IACLManager} from "../../interfaces/IACLManager.sol";
-import {IPoolDataProvider} from "../../interfaces/IPoolDataProvider.sol";
-import {IERC20} from "../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {IERC20Detailed} from "../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
-
-/**
- * @title PoolConfigurator
- * @author Aave
- * @dev Implements the configuration methods for the Aave protocol
- */
-abstract contract PoolConfigurator is
-    VersionedInitializable,
-    IPoolConfigurator
-{
-    using PercentageMath for uint256;
-    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
-
-    IPoolAddressesProvider internal _addressesProvider;
-    IPool internal _pool;
-
-    mapping(address => uint256) internal _pendingLtv;
-
-    uint40 public constant MAX_GRACE_PERIOD = 4 hours;
-
-    /**
-     * @dev Only pool admin can call functions marked by this modifier.
-     */
-    modifier onlyPoolAdmin() {
-        _onlyPoolAdmin();
-        _;
-    }
-
-    /**
-     * @dev Only emergency or pool admin can call functions marked by this modifier.
-     */
-    modifier onlyEmergencyOrPoolAdmin() {
-        _onlyPoolOrEmergencyAdmin();
-        _;
-    }
-
-    /**
-     * @dev Only asset listing or pool admin can call functions marked by this modifier.
-     */
-    modifier onlyAssetListingOrPoolAdmins() {
-        _onlyAssetListingOrPoolAdmins();
-        _;
-    }
-
-    /**
-     * @dev Only risk or pool admin can call functions marked by this modifier.
-     */
-    modifier onlyRiskOrPoolAdmins() {
-        _onlyRiskOrPoolAdmins();
-        _;
-    }
-
-    /**
-     * @dev Only risk, pool or emergency admin can call functions marked by this modifier.
-     */
-    modifier onlyRiskOrPoolOrEmergencyAdmins() {
-        _onlyRiskOrPoolOrEmergencyAdmins();
-        _;
-    }
-
-    function initialize(IPoolAddressesProvider provider) public virtual;
-
-    /// @inheritdoc IPoolConfigurator
-    function initReserves(
-        ConfiguratorInputTypes.InitReserveInput[] calldata input
-    ) external override onlyAssetListingOrPoolAdmins {
-        IPool cachedPool = _pool;
-
-        for (uint256 i = 0; i < input.length; i++) {
-            ConfiguratorLogic.executeInitReserve(cachedPool, input[i]);
-            emit ReserveInterestRateDataChanged(
-                input[i].underlyingAsset,
-                input[i].interestRateStrategyAddress,
-                input[i].interestRateData
-            );
-        }
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function dropReserve(address asset) external override onlyPoolAdmin {
-        _pool.dropReserve(asset);
-        emit ReserveDropped(asset);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function updateAToken(
-        ConfiguratorInputTypes.UpdateATokenInput calldata input
-    ) external override onlyPoolAdmin {
-        ConfiguratorLogic.executeUpdateAToken(_pool, input);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function updateVariableDebtToken(
-        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
-    ) external override onlyPoolAdmin {
-        ConfiguratorLogic.executeUpdateVariableDebtToken(_pool, input);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveBorrowing(
-        address asset,
-        bool enabled
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        currentConfig.setBorrowingEnabled(enabled);
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReserveBorrowing(asset, enabled);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function configureReserveAsCollateral(
-        address asset,
-        uint256 ltv,
-        uint256 liquidationThreshold,
-        uint256 liquidationBonus
-    ) external override onlyRiskOrPoolAdmins {
-        //validation of the parameters: the LTV can
-        //only be lower or equal than the liquidation threshold
-        //(otherwise a loan against the asset would cause instantaneous liquidation)
-        require(ltv <= liquidationThreshold, Errors.INVALID_RESERVE_PARAMS);
-
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-
-        if (liquidationThreshold != 0) {
-            //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less
-            //collateral than needed to cover the debt
-            require(
-                liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,
-                Errors.INVALID_RESERVE_PARAMS
-            );
-
-            //if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
-            //a loan is taken there is enough collateral available to cover the liquidation bonus
-            require(
-                liquidationThreshold.percentMul(liquidationBonus) <=
-                    PercentageMath.PERCENTAGE_FACTOR,
-                Errors.INVALID_RESERVE_PARAMS
-            );
-        } else {
-            require(liquidationBonus == 0, Errors.INVALID_RESERVE_PARAMS);
-            //if the liquidation threshold is being set to 0,
-            // the reserve is being disabled as collateral. To do so,
-            //we need to ensure no liquidity is supplied
-            _checkNoSuppliers(asset);
-        }
-
-        uint256 newLtv = ltv;
-
-        if (currentConfig.getFrozen()) {
-            _pendingLtv[asset] = ltv;
-            newLtv = 0;
-
-            emit PendingLtvChanged(asset, ltv);
-        } else {
-            currentConfig.setLtv(ltv);
-        }
-
-        currentConfig.setLiquidationThreshold(liquidationThreshold);
-        currentConfig.setLiquidationBonus(liquidationBonus);
-
-        _pool.setConfiguration(asset, currentConfig);
-
-        emit CollateralConfigurationChanged(
-            asset,
-            newLtv,
-            liquidationThreshold,
-            liquidationBonus
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveFlashLoaning(
-        address asset,
-        bool enabled
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-
-        currentConfig.setFlashLoanEnabled(enabled);
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReserveFlashLoaning(asset, enabled);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveActive(
-        address asset,
-        bool active
-    ) external override onlyPoolAdmin {
-        if (!active) _checkNoSuppliers(asset);
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        currentConfig.setActive(active);
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReserveActive(asset, active);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveFreeze(
-        address asset,
-        bool freeze
-    ) external override onlyRiskOrPoolOrEmergencyAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-
-        require(
-            freeze != currentConfig.getFrozen(),
-            Errors.INVALID_FREEZE_STATE
-        );
-
-        currentConfig.setFrozen(freeze);
-
-        uint256 ltvSet;
-        uint256 pendingLtvSet;
-
-        if (freeze) {
-            pendingLtvSet = currentConfig.getLtv();
-            _pendingLtv[asset] = pendingLtvSet;
-            currentConfig.setLtv(0);
-        } else {
-            ltvSet = _pendingLtv[asset];
-            currentConfig.setLtv(ltvSet);
-            delete _pendingLtv[asset];
-        }
-
-        emit PendingLtvChanged(asset, pendingLtvSet);
-        emit CollateralConfigurationChanged(
-            asset,
-            ltvSet,
-            currentConfig.getLiquidationThreshold(),
-            currentConfig.getLiquidationBonus()
-        );
-
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReserveFrozen(asset, freeze);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setBorrowableInIsolation(
-        address asset,
-        bool borrowable
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        currentConfig.setBorrowableInIsolation(borrowable);
-        _pool.setConfiguration(asset, currentConfig);
-        emit BorrowableInIsolationChanged(asset, borrowable);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReservePause(
-        address asset,
-        bool paused,
-        uint40 gracePeriod
-    ) public override onlyEmergencyOrPoolAdmin {
-        if (!paused && gracePeriod != 0) {
-            require(
-                gracePeriod <= MAX_GRACE_PERIOD,
-                Errors.INVALID_GRACE_PERIOD
-            );
-
-            uint40 until = uint40(block.timestamp) + gracePeriod;
-            _pool.setLiquidationGracePeriod(asset, until);
-            emit LiquidationGracePeriodChanged(asset, until);
-        }
-
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        currentConfig.setPaused(paused);
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReservePaused(asset, paused);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReservePause(
-        address asset,
-        bool paused
-    ) external override onlyEmergencyOrPoolAdmin {
-        setReservePause(asset, paused, 0);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function disableLiquidationGracePeriod(
-        address asset
-    ) external override onlyEmergencyOrPoolAdmin {
-        // set the liquidation grace period in the past to disable liquidation grace period
-        _pool.setLiquidationGracePeriod(asset, 0);
-
-        emit LiquidationGracePeriodDisabled(asset);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveFactor(
-        address asset,
-        uint256 newReserveFactor
-    ) external override onlyRiskOrPoolAdmins {
-        require(
-            newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR,
-            Errors.INVALID_RESERVE_FACTOR
-        );
-
-        _pool.syncIndexesState(asset);
-
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        uint256 oldReserveFactor = currentConfig.getReserveFactor();
-        currentConfig.setReserveFactor(newReserveFactor);
-        _pool.setConfiguration(asset, currentConfig);
-        emit ReserveFactorChanged(asset, oldReserveFactor, newReserveFactor);
-
-        _pool.syncRatesState(asset);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setDebtCeiling(
-        address asset,
-        uint256 newDebtCeiling
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-
-        uint256 oldDebtCeiling = currentConfig.getDebtCeiling();
-        if (
-            currentConfig.getLiquidationThreshold() != 0 && oldDebtCeiling == 0
-        ) {
-            _checkNoSuppliers(asset);
-        }
-        currentConfig.setDebtCeiling(newDebtCeiling);
-        _pool.setConfiguration(asset, currentConfig);
-
-        if (newDebtCeiling == 0) {
-            _pool.resetIsolationModeTotalDebt(asset);
-        }
-
-        emit DebtCeilingChanged(asset, oldDebtCeiling, newDebtCeiling);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setSiloedBorrowing(
-        address asset,
-        bool newSiloed
-    ) external override onlyRiskOrPoolAdmins {
-        if (newSiloed) {
-            _checkNoBorrowers(asset);
-        }
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-
-        bool oldSiloed = currentConfig.getSiloedBorrowing();
-
-        currentConfig.setSiloedBorrowing(newSiloed);
-
-        _pool.setConfiguration(asset, currentConfig);
-
-        emit SiloedBorrowingChanged(asset, oldSiloed, newSiloed);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setBorrowCap(
-        address asset,
-        uint256 newBorrowCap
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        uint256 oldBorrowCap = currentConfig.getBorrowCap();
-        currentConfig.setBorrowCap(newBorrowCap);
-        _pool.setConfiguration(asset, currentConfig);
-        emit BorrowCapChanged(asset, oldBorrowCap, newBorrowCap);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setSupplyCap(
-        address asset,
-        uint256 newSupplyCap
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        uint256 oldSupplyCap = currentConfig.getSupplyCap();
-        currentConfig.setSupplyCap(newSupplyCap);
-        _pool.setConfiguration(asset, currentConfig);
-        emit SupplyCapChanged(asset, oldSupplyCap, newSupplyCap);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setLiquidationProtocolFee(
-        address asset,
-        uint256 newFee
-    ) external override onlyRiskOrPoolAdmins {
-        require(
-            newFee <= PercentageMath.PERCENTAGE_FACTOR,
-            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE
-        );
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        uint256 oldFee = currentConfig.getLiquidationProtocolFee();
-        currentConfig.setLiquidationProtocolFee(newFee);
-        _pool.setConfiguration(asset, currentConfig);
-        emit LiquidationProtocolFeeChanged(asset, oldFee, newFee);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setEModeCategory(
-        uint8 categoryId,
-        uint16 ltv,
-        uint16 liquidationThreshold,
-        uint16 liquidationBonus,
-        string calldata label
-    ) external override onlyRiskOrPoolAdmins {
-        require(ltv != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);
-        require(
-            liquidationThreshold != 0,
-            Errors.INVALID_EMODE_CATEGORY_PARAMS
-        );
-
-        // validation of the parameters: the LTV can
-        // only be lower or equal than the liquidation threshold
-        // (otherwise a loan against the asset would cause instantaneous liquidation)
-        require(
-            ltv <= liquidationThreshold,
-            Errors.INVALID_EMODE_CATEGORY_PARAMS
-        );
-        require(
-            liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,
-            Errors.INVALID_EMODE_CATEGORY_PARAMS
-        );
-
-        // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
-        // a loan is taken there is enough collateral available to cover the liquidation bonus
-        require(
-            uint256(liquidationThreshold).percentMul(liquidationBonus) <=
-                PercentageMath.PERCENTAGE_FACTOR,
-            Errors.INVALID_EMODE_CATEGORY_PARAMS
-        );
-
-        DataTypes.EModeCategoryBaseConfiguration memory categoryData;
-        categoryData.ltv = ltv;
-        categoryData.liquidationThreshold = liquidationThreshold;
-        categoryData.liquidationBonus = liquidationBonus;
-        categoryData.label = label;
-
-        _pool.configureEModeCategory(categoryId, categoryData);
-        emit EModeCategoryAdded(
-            categoryId,
-            ltv,
-            liquidationThreshold,
-            liquidationBonus,
-            address(0),
-            label
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setAssetCollateralInEMode(
-        address asset,
-        uint8 categoryId,
-        bool allowed
-    ) external override onlyRiskOrPoolAdmins {
-        uint128 collateralBitmap = _pool.getEModeCategoryCollateralBitmap(
-            categoryId
-        );
-        DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(
-            asset
-        );
-        require(
-            reserveData.id != 0 || _pool.getReservesList()[0] == asset,
-            Errors.ASSET_NOT_LISTED
-        );
-        collateralBitmap = EModeConfiguration.setReserveBitmapBit(
-            collateralBitmap,
-            reserveData.id,
-            allowed
-        );
-        _pool.configureEModeCategoryCollateralBitmap(
-            categoryId,
-            collateralBitmap
-        );
-        emit AssetCollateralInEModeChanged(asset, categoryId, allowed);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setAssetBorrowableInEMode(
-        address asset,
-        uint8 categoryId,
-        bool borrowable
-    ) external override onlyRiskOrPoolAdmins {
-        uint128 borrowableBitmap = _pool.getEModeCategoryBorrowableBitmap(
-            categoryId
-        );
-        DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(
-            asset
-        );
-        require(
-            reserveData.id != 0 || _pool.getReservesList()[0] == asset,
-            Errors.ASSET_NOT_LISTED
-        );
-        borrowableBitmap = EModeConfiguration.setReserveBitmapBit(
-            borrowableBitmap,
-            reserveData.id,
-            borrowable
-        );
-        _pool.configureEModeCategoryBorrowableBitmap(
-            categoryId,
-            borrowableBitmap
-        );
-        emit AssetBorrowableInEModeChanged(asset, categoryId, borrowable);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setUnbackedMintCap(
-        address asset,
-        uint256 newUnbackedMintCap
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveConfigurationMap memory currentConfig = _pool
-            .getConfiguration(asset);
-        uint256 oldUnbackedMintCap = currentConfig.getUnbackedMintCap();
-        currentConfig.setUnbackedMintCap(newUnbackedMintCap);
-        _pool.setConfiguration(asset, currentConfig);
-        emit UnbackedMintCapChanged(
-            asset,
-            oldUnbackedMintCap,
-            newUnbackedMintCap
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveInterestRateData(
-        address asset,
-        bytes calldata rateData
-    ) external onlyRiskOrPoolAdmins {
-        DataTypes.ReserveDataLegacy memory reserve = _pool.getReserveData(
-            asset
-        );
-        _updateInterestRateStrategy(
-            asset,
-            reserve,
-            reserve.interestRateStrategyAddress,
-            rateData
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setReserveInterestRateStrategyAddress(
-        address asset,
-        address rateStrategyAddress,
-        bytes calldata rateData
-    ) external override onlyRiskOrPoolAdmins {
-        DataTypes.ReserveDataLegacy memory reserve = _pool.getReserveData(
-            asset
-        );
-        _updateInterestRateStrategy(
-            asset,
-            reserve,
-            rateStrategyAddress,
-            rateData
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setPoolPause(
-        bool paused,
-        uint40 gracePeriod
-    ) public override onlyEmergencyOrPoolAdmin {
-        address[] memory reserves = _pool.getReservesList();
-
-        for (uint256 i = 0; i < reserves.length; i++) {
-            if (reserves[i] != address(0)) {
-                setReservePause(reserves[i], paused, gracePeriod);
-            }
-        }
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function setPoolPause(
-        bool paused
-    ) external override onlyEmergencyOrPoolAdmin {
-        setPoolPause(paused, 0);
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function updateBridgeProtocolFee(
-        uint256 newBridgeProtocolFee
-    ) external override onlyPoolAdmin {
-        require(
-            newBridgeProtocolFee <= PercentageMath.PERCENTAGE_FACTOR,
-            Errors.BRIDGE_PROTOCOL_FEE_INVALID
-        );
-        uint256 oldBridgeProtocolFee = _pool.BRIDGE_PROTOCOL_FEE();
-        _pool.updateBridgeProtocolFee(newBridgeProtocolFee);
-        emit BridgeProtocolFeeUpdated(
-            oldBridgeProtocolFee,
-            newBridgeProtocolFee
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function updateFlashloanPremiumTotal(
-        uint128 newFlashloanPremiumTotal
-    ) external override onlyPoolAdmin {
-        require(
-            newFlashloanPremiumTotal <= PercentageMath.PERCENTAGE_FACTOR,
-            Errors.FLASHLOAN_PREMIUM_INVALID
-        );
-        uint128 oldFlashloanPremiumTotal = _pool.FLASHLOAN_PREMIUM_TOTAL();
-        _pool.updateFlashloanPremiums(
-            newFlashloanPremiumTotal,
-            _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()
-        );
-        emit FlashloanPremiumTotalUpdated(
-            oldFlashloanPremiumTotal,
-            newFlashloanPremiumTotal
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function updateFlashloanPremiumToProtocol(
-        uint128 newFlashloanPremiumToProtocol
-    ) external override onlyPoolAdmin {
-        require(
-            newFlashloanPremiumToProtocol <= PercentageMath.PERCENTAGE_FACTOR,
-            Errors.FLASHLOAN_PREMIUM_INVALID
-        );
-        uint128 oldFlashloanPremiumToProtocol = _pool
-            .FLASHLOAN_PREMIUM_TO_PROTOCOL();
-        _pool.updateFlashloanPremiums(
-            _pool.FLASHLOAN_PREMIUM_TOTAL(),
-            newFlashloanPremiumToProtocol
-        );
-        emit FlashloanPremiumToProtocolUpdated(
-            oldFlashloanPremiumToProtocol,
-            newFlashloanPremiumToProtocol
-        );
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function getPendingLtv(
-        address asset
-    ) external view override returns (uint256) {
-        return _pendingLtv[asset];
-    }
-
-    /// @inheritdoc IPoolConfigurator
-    function getConfiguratorLogic() external pure returns (address) {
-        return address(ConfiguratorLogic);
-    }
-
-    function _updateInterestRateStrategy(
-        address asset,
-        DataTypes.ReserveDataLegacy memory reserve,
-        address newRateStrategyAddress,
-        bytes calldata rateData
-    ) internal {
-        address oldRateStrategyAddress = reserve.interestRateStrategyAddress;
-
-        _pool.syncIndexesState(asset);
-
-        IDefaultInterestRateStrategyV2(newRateStrategyAddress)
-            .setInterestRateParams(asset, rateData);
-        emit ReserveInterestRateDataChanged(
-            asset,
-            newRateStrategyAddress,
-            rateData
-        );
-
-        if (oldRateStrategyAddress != newRateStrategyAddress) {
-            _pool.setReserveInterestRateStrategyAddress(
-                asset,
-                newRateStrategyAddress
-            );
-            emit ReserveInterestRateStrategyChanged(
-                asset,
-                oldRateStrategyAddress,
-                newRateStrategyAddress
-            );
-        }
-
-        _pool.syncRatesState(asset);
-    }
-
-    function _checkNoSuppliers(address asset) internal view {
-        DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(
-            asset
-        );
-        uint256 totalSupplied = IPoolDataProvider(
-            _addressesProvider.getPoolDataProvider()
-        ).getATokenTotalSupply(asset);
-
-        require(
-            totalSupplied == 0 && reserveData.accruedToTreasury == 0,
-            Errors.RESERVE_LIQUIDITY_NOT_ZERO
-        );
-    }
-
-    function _checkNoBorrowers(address asset) internal view {
-        uint256 totalDebt = IPoolDataProvider(
-            _addressesProvider.getPoolDataProvider()
-        ).getTotalDebt(asset);
-        require(totalDebt == 0, Errors.RESERVE_DEBT_NOT_ZERO);
-    }
-
-    function _onlyPoolAdmin() internal view {
-        IACLManager aclManager = IACLManager(
-            _addressesProvider.getACLManager()
-        );
-        require(
-            aclManager.isPoolAdmin(msg.sender),
-            Errors.CALLER_NOT_POOL_ADMIN
-        );
-    }
-
-    function _onlyPoolOrEmergencyAdmin() internal view {
-        IACLManager aclManager = IACLManager(
-            _addressesProvider.getACLManager()
-        );
-        require(
-            aclManager.isPoolAdmin(msg.sender) ||
-                aclManager.isEmergencyAdmin(msg.sender),
-            Errors.CALLER_NOT_POOL_OR_EMERGENCY_ADMIN
-        );
-    }
-
-    function _onlyAssetListingOrPoolAdmins() internal view {
-        IACLManager aclManager = IACLManager(
-            _addressesProvider.getACLManager()
-        );
-        require(
-            aclManager.isAssetListingAdmin(msg.sender) ||
-                aclManager.isPoolAdmin(msg.sender),
-            Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN
-        );
-    }
-
-    function _onlyRiskOrPoolAdmins() internal view {
-        IACLManager aclManager = IACLManager(
-            _addressesProvider.getACLManager()
-        );
-        require(
-            aclManager.isRiskAdmin(msg.sender) ||
-                aclManager.isPoolAdmin(msg.sender),
-            Errors.CALLER_NOT_RISK_OR_POOL_ADMIN
-        );
-    }
-
-    function _onlyRiskOrPoolOrEmergencyAdmins() internal view {
-        IACLManager aclManager = IACLManager(
-            _addressesProvider.getACLManager()
-        );
-        require(
-            aclManager.isRiskAdmin(msg.sender) ||
-                aclManager.isPoolAdmin(msg.sender) ||
-                aclManager.isEmergencyAdmin(msg.sender),
-            Errors.CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN
-        );
-    }
-}
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfiguratorInstance.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol
index 3a1afbd..cdb0a93 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/PoolConfiguratorInstance.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol
@@ -4,7 +4,7 @@ pragma solidity ^0.8.0;
 import {PoolConfigurator, IPoolAddressesProvider, IPool, VersionedInitializable} from "../protocol/pool/PoolConfigurator.sol";
 
 contract PoolConfiguratorInstance is PoolConfigurator {
-    uint256 public constant CONFIGURATOR_REVISION = 4;
+    uint256 public constant CONFIGURATOR_REVISION = 5;
 
     /// @inheritdoc VersionedInitializable
     function getRevision() internal pure virtual override returns (uint256) {
diff --git a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ReserveConfiguration.sol b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol
index 4aa3169..a829da8 100644
--- a/tmp/1_0x4816b2C2895f97fB918f1aE7Da403750a0eE372e_flat/ReserveConfiguration.sol
+++ b/tmp/1_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol
@@ -10,33 +10,33 @@ import {DataTypes} from "../types/DataTypes.sol";
  * @notice Implements the bitmap logic to handle the reserve configuration
  */
 library ReserveConfiguration {
-    uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore
+    uint256 internal constant LTV_MASK = 0x000000000000000000000000000000000000000000000000000000000000FFFF; // prettier-ignore
     uint256 internal constant LIQUIDATION_THRESHOLD_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore
+        0x00000000000000000000000000000000000000000000000000000000FFFF0000; // prettier-ignore
     uint256 internal constant LIQUIDATION_BONUS_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore
-    uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000000000FFFF00000000; // prettier-ignore
+    uint256 internal constant DECIMALS_MASK = 0x00000000000000000000000000000000000000000000000000FF000000000000; // prettier-ignore
+    uint256 internal constant ACTIVE_MASK = 0x0000000000000000000000000000000000000000000000000100000000000000; // prettier-ignore
+    uint256 internal constant FROZEN_MASK = 0x0000000000000000000000000000000000000000000000000200000000000000; // prettier-ignore
+    uint256 internal constant BORROWING_MASK = 0x0000000000000000000000000000000000000000000000000400000000000000; // prettier-ignore
     // @notice there is an unoccupied hole of 1 bit at position 59 from pre 3.2 stableBorrowRateEnabled
-    uint256 internal constant PAUSED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
+    uint256 internal constant PAUSED_MASK = 0x0000000000000000000000000000000000000000000000001000000000000000; // prettier-ignore
     uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SILOED_BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000002000000000000000; // prettier-ignore
+    uint256 internal constant SILOED_BORROWING_MASK = 0x0000000000000000000000000000000000000000000000004000000000000000; // prettier-ignore
     uint256 internal constant FLASHLOAN_ENABLED_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x0000000000000000000000000000000000000000000000008000000000000000; // prettier-ignore
+    uint256 internal constant RESERVE_FACTOR_MASK = 0x00000000000000000000000000000000000000000000FFFF0000000000000000; // prettier-ignore
+    uint256 internal constant BORROW_CAP_MASK = 0x00000000000000000000000000000000000FFFFFFFFF00000000000000000000; // prettier-ignore
+    uint256 internal constant SUPPLY_CAP_MASK = 0x00000000000000000000000000FFFFFFFFF00000000000000000000000000000; // prettier-ignore
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =
-        0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    // @notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
+        0x0000000000000000000000FFFF00000000000000000000000000000000000000; // prettier-ignore
+    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
     uint256 internal constant UNBACKED_MINT_CAP_MASK =
-        0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant DEBT_CEILING_MASK = 0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x00000000000FFFFFFFFF00000000000000000000000000000000000000000000; // prettier-ignore
+    uint256 internal constant DEBT_CEILING_MASK = 0x0FFFFFFFFFF00000000000000000000000000000000000000000000000000000; // prettier-ignore
     uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =
-        0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+        0x1000000000000000000000000000000000000000000000000000000000000000; // prettier-ignore
 
     /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
     uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;
@@ -83,7 +83,7 @@ library ReserveConfiguration {
     ) internal pure {
         require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);
 
-        self.data = (self.data & LTV_MASK) | ltv;
+        self.data = (self.data & ~LTV_MASK) | ltv;
     }
 
     /**
@@ -94,7 +94,7 @@ library ReserveConfiguration {
     function getLtv(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return self.data & ~LTV_MASK;
+        return self.data & LTV_MASK;
     }
 
     /**
@@ -112,7 +112,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_THRESHOLD_MASK) |
+            (self.data & ~LIQUIDATION_THRESHOLD_MASK) |
             (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);
     }
 
@@ -125,7 +125,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>
+            (self.data & LIQUIDATION_THRESHOLD_MASK) >>
             LIQUIDATION_THRESHOLD_START_BIT_POSITION;
     }
 
@@ -141,7 +141,7 @@ library ReserveConfiguration {
         require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);
 
         self.data =
-            (self.data & LIQUIDATION_BONUS_MASK) |
+            (self.data & ~LIQUIDATION_BONUS_MASK) |
             (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
     }
 
@@ -154,7 +154,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_BONUS_MASK) >>
+            (self.data & LIQUIDATION_BONUS_MASK) >>
             LIQUIDATION_BONUS_START_BIT_POSITION;
     }
 
@@ -170,7 +170,7 @@ library ReserveConfiguration {
         require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);
 
         self.data =
-            (self.data & DECIMALS_MASK) |
+            (self.data & ~DECIMALS_MASK) |
             (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
     }
 
@@ -183,7 +183,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
+            (self.data & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;
     }
 
     /**
@@ -196,7 +196,7 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & ACTIVE_MASK) |
+            (self.data & ~ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);
     }
 
@@ -208,7 +208,7 @@ library ReserveConfiguration {
     function getActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~ACTIVE_MASK) != 0;
+        return (self.data & ACTIVE_MASK) != 0;
     }
 
     /**
@@ -221,7 +221,7 @@ library ReserveConfiguration {
         bool frozen
     ) internal pure {
         self.data =
-            (self.data & FROZEN_MASK) |
+            (self.data & ~FROZEN_MASK) |
             (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);
     }
 
@@ -233,7 +233,7 @@ library ReserveConfiguration {
     function getFrozen(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FROZEN_MASK) != 0;
+        return (self.data & FROZEN_MASK) != 0;
     }
 
     /**
@@ -246,7 +246,7 @@ library ReserveConfiguration {
         bool paused
     ) internal pure {
         self.data =
-            (self.data & PAUSED_MASK) |
+            (self.data & ~PAUSED_MASK) |
             (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);
     }
 
@@ -258,7 +258,7 @@ library ReserveConfiguration {
     function getPaused(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~PAUSED_MASK) != 0;
+        return (self.data & PAUSED_MASK) != 0;
     }
 
     /**
@@ -275,7 +275,7 @@ library ReserveConfiguration {
         bool borrowable
     ) internal pure {
         self.data =
-            (self.data & BORROWABLE_IN_ISOLATION_MASK) |
+            (self.data & ~BORROWABLE_IN_ISOLATION_MASK) |
             (uint256(borrowable ? 1 : 0) <<
                 BORROWABLE_IN_ISOLATION_START_BIT_POSITION);
     }
@@ -292,7 +292,7 @@ library ReserveConfiguration {
     function getBorrowableInIsolation(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;
+        return (self.data & BORROWABLE_IN_ISOLATION_MASK) != 0;
     }
 
     /**
@@ -306,7 +306,7 @@ library ReserveConfiguration {
         bool siloed
     ) internal pure {
         self.data =
-            (self.data & SILOED_BORROWING_MASK) |
+            (self.data & ~SILOED_BORROWING_MASK) |
             (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);
     }
 
@@ -319,7 +319,7 @@ library ReserveConfiguration {
     function getSiloedBorrowing(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~SILOED_BORROWING_MASK) != 0;
+        return (self.data & SILOED_BORROWING_MASK) != 0;
     }
 
     /**
@@ -332,7 +332,7 @@ library ReserveConfiguration {
         bool enabled
     ) internal pure {
         self.data =
-            (self.data & BORROWING_MASK) |
+            (self.data & ~BORROWING_MASK) |
             (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);
     }
 
@@ -344,7 +344,7 @@ library ReserveConfiguration {
     function getBorrowingEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~BORROWING_MASK) != 0;
+        return (self.data & BORROWING_MASK) != 0;
     }
 
     /**
@@ -362,7 +362,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & RESERVE_FACTOR_MASK) |
+            (self.data & ~RESERVE_FACTOR_MASK) |
             (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);
     }
 
@@ -375,7 +375,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~RESERVE_FACTOR_MASK) >>
+            (self.data & RESERVE_FACTOR_MASK) >>
             RESERVE_FACTOR_START_BIT_POSITION;
     }
 
@@ -391,7 +391,7 @@ library ReserveConfiguration {
         require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);
 
         self.data =
-            (self.data & BORROW_CAP_MASK) |
+            (self.data & ~BORROW_CAP_MASK) |
             (borrowCap << BORROW_CAP_START_BIT_POSITION);
     }
 
@@ -403,7 +403,7 @@ library ReserveConfiguration {
     function getBorrowCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
+        return (self.data & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -418,7 +418,7 @@ library ReserveConfiguration {
         require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);
 
         self.data =
-            (self.data & SUPPLY_CAP_MASK) |
+            (self.data & ~SUPPLY_CAP_MASK) |
             (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
     }
 
@@ -430,7 +430,7 @@ library ReserveConfiguration {
     function getSupplyCap(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
-        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
+        return (self.data & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;
     }
 
     /**
@@ -445,7 +445,7 @@ library ReserveConfiguration {
         require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);
 
         self.data =
-            (self.data & DEBT_CEILING_MASK) |
+            (self.data & ~DEBT_CEILING_MASK) |
             (ceiling << DEBT_CEILING_START_BIT_POSITION);
     }
 
@@ -458,7 +458,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
+            (self.data & DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;
     }
 
     /**
@@ -476,7 +476,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |
+            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) |
             (liquidationProtocolFee <<
                 LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);
     }
@@ -490,7 +490,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>
+            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) >>
             LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
     }
 
@@ -509,7 +509,7 @@ library ReserveConfiguration {
         );
 
         self.data =
-            (self.data & UNBACKED_MINT_CAP_MASK) |
+            (self.data & ~UNBACKED_MINT_CAP_MASK) |
             (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
     }
 
@@ -522,7 +522,7 @@ library ReserveConfiguration {
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (uint256) {
         return
-            (self.data & ~UNBACKED_MINT_CAP_MASK) >>
+            (self.data & UNBACKED_MINT_CAP_MASK) >>
             UNBACKED_MINT_CAP_START_BIT_POSITION;
     }
 
@@ -536,7 +536,7 @@ library ReserveConfiguration {
         bool flashLoanEnabled
     ) internal pure {
         self.data =
-            (self.data & FLASHLOAN_ENABLED_MASK) |
+            (self.data & ~FLASHLOAN_ENABLED_MASK) |
             (uint256(flashLoanEnabled ? 1 : 0) <<
                 FLASHLOAN_ENABLED_START_BIT_POSITION);
     }
@@ -549,7 +549,7 @@ library ReserveConfiguration {
     function getFlashLoanEnabled(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;
+        return (self.data & FLASHLOAN_ENABLED_MASK) != 0;
     }
 
     /**
@@ -562,21 +562,24 @@ library ReserveConfiguration {
         bool active
     ) internal pure {
         self.data =
-            (self.data & VIRTUAL_ACC_ACTIVE_MASK) |
+            (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) |
             (uint256(active ? 1 : 0) << VIRTUAL_ACC_START_BIT_POSITION);
     }
 
     /**
      * @notice Gets the virtual account active/not state of the reserve
      * @dev The state should be true for all normal assets and should be false
-     *  only in special cases (ex. GHO) where an asset is minted instead of supplied.
+     * Virtual accounting being disabled means that the asset:
+     * - is GHO
+     * - can never be supplied
+     * - the interest rate strategy is not influenced by the virtual balance
      * @param self The reserve configuration
      * @return The active state
      */
     function getIsVirtualAccActive(
         DataTypes.ReserveConfigurationMap memory self
     ) internal pure returns (bool) {
-        return (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) != 0;
+        return (self.data & VIRTUAL_ACC_ACTIVE_MASK) != 0;
     }
 
     /**
@@ -593,10 +596,10 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~ACTIVE_MASK) != 0,
-            (dataLocal & ~FROZEN_MASK) != 0,
-            (dataLocal & ~BORROWING_MASK) != 0,
-            (dataLocal & ~PAUSED_MASK) != 0
+            (dataLocal & ACTIVE_MASK) != 0,
+            (dataLocal & FROZEN_MASK) != 0,
+            (dataLocal & BORROWING_MASK) != 0,
+            (dataLocal & PAUSED_MASK) != 0
         );
     }
 
@@ -615,13 +618,13 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            dataLocal & ~LTV_MASK,
-            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>
+            dataLocal & LTV_MASK,
+            (dataLocal & LIQUIDATION_THRESHOLD_MASK) >>
                 LIQUIDATION_THRESHOLD_START_BIT_POSITION,
-            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>
+            (dataLocal & LIQUIDATION_BONUS_MASK) >>
                 LIQUIDATION_BONUS_START_BIT_POSITION,
-            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
-            (dataLocal & ~RESERVE_FACTOR_MASK) >>
+            (dataLocal & DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
+            (dataLocal & RESERVE_FACTOR_MASK) >>
                 RESERVE_FACTOR_START_BIT_POSITION
         );
     }
@@ -638,8 +641,8 @@ library ReserveConfiguration {
         uint256 dataLocal = self.data;
 
         return (
-            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
-            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
+            (dataLocal & BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,
+            (dataLocal & SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION
         );
     }
 }
